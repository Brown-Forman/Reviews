content.temp = df.temp$content
content = append(content,content.temp)
response.temp = df.temp$response
response = append(response,response.temp)
star.temp <- reviews %>%
html_nodes("span.ui_bubble_rating") %>%
html_attr("alt")
star.temp <- star.temp[!is.na(star.temp)]
star.temp <- star.temp[3:length(star.temp)]
star.temp <- strsplit(star.temp, " ")
star.temp <- as.numeric(lapply(star.temp, `[[`, 1))
star <- append(star,star.temp)
n = n + 10
print(o)
l_headline = length(headline.temp)
print(l_headline)
length_df.temp = data.frame(l_headline)
length_df1 = rbind(length_df1,length_df.temp)
n.character = as.character(n)
url = paste0("https://www.tripadvisor.com/Restaurant_Review-g39604-d9799396-Reviews",
'-or',n.character,"-Mussel_Burger_Bar_Downtown-Louisville_Kentucky.html")
reviews = read_html(url)
headline.temp = reviews %>%
html_nodes("span.noQuotes") %>%
html_text()
headline = append(headline,headline.temp)
# body including reviews and response from owner, need to look at responded.yn.temp to distinguish between review and response
body.temp <- reviews %>%
html_nodes(".entry .partial_entry") %>%
html_text()
# Owner responded yes or no
responded.yn.temp <- reviews %>%
html_nodes("div.mgrRspnInline") %>%
html_text()
responded.yn.temp <- strsplit(responded.yn.temp,"Responded ")
responded.yn.temp <- sapply(responded.yn.temp,function(x) x[2])
responded.yn.temp <- str_replace_all(responded.yn.temp,', 20..',"qwertyuiop")
responded.yn.temp <- strsplit(responded.yn.temp,'qwertyuiop')
responded.yn.temp <- sapply(responded.yn.temp,function(x) x[2])
responded.yn.temp <- body.temp %in% responded.yn.temp
df.temp <- func_body(body.temp,responded.yn.temp)
content.temp = df.temp$content
content = append(content,content.temp)
response.temp = df.temp$response
response = append(response,response.temp)
star.temp <- reviews %>%
html_nodes("span.ui_bubble_rating") %>%
html_attr("alt")
star.temp <- star.temp[!is.na(star.temp)]
star.temp <- star.temp[3:length(star.temp)]
star.temp <- strsplit(star.temp, " ")
star.temp <- as.numeric(lapply(star.temp, `[[`, 1))
star <- append(star,star.temp)
n = n + 10
print(o)
l_headline = length(headline.temp)
print(l_headline)
length_df.temp = data.frame(l_headline)
length_df1 = rbind(length_df1,length_df.temp)
n.character = as.character(n)
url = paste0("https://www.tripadvisor.com/Restaurant_Review-g39604-d9799396-Reviews",
'-or',n.character,"-Mussel_Burger_Bar_Downtown-Louisville_Kentucky.html")
reviews = read_html(url)
headline.temp = reviews %>%
html_nodes("span.noQuotes") %>%
html_text()
headline = append(headline,headline.temp)
# body including reviews and response from owner, need to look at responded.yn.temp to distinguish between review and response
body.temp <- reviews %>%
html_nodes(".entry .partial_entry") %>%
html_text()
# Owner responded yes or no
responded.yn.temp <- reviews %>%
html_nodes("div.mgrRspnInline") %>%
html_text()
responded.yn.temp <- strsplit(responded.yn.temp,"Responded ")
responded.yn.temp <- sapply(responded.yn.temp,function(x) x[2])
responded.yn.temp <- str_replace_all(responded.yn.temp,', 20..',"qwertyuiop")
responded.yn.temp <- strsplit(responded.yn.temp,'qwertyuiop')
responded.yn.temp <- sapply(responded.yn.temp,function(x) x[2])
responded.yn.temp <- body.temp %in% responded.yn.temp
df.temp <- func_body(body.temp,responded.yn.temp)
content.temp = df.temp$content
content = append(content,content.temp)
response.temp = df.temp$response
response = append(response,response.temp)
star.temp <- reviews %>%
html_nodes("span.ui_bubble_rating") %>%
html_attr("alt")
star.temp <- star.temp[!is.na(star.temp)]
star.temp <- star.temp[3:length(star.temp)]
star.temp <- strsplit(star.temp, " ")
star.temp <- as.numeric(lapply(star.temp, `[[`, 1))
star <- append(star,star.temp)
n = n + 10
print(o)
l_headline = length(headline.temp)
print(l_headline)
length_df.temp = data.frame(l_headline)
length_df1 = rbind(length_df1,length_df.temp)
n.character = as.character(n)
url = paste0("https://www.tripadvisor.com/Restaurant_Review-g39604-d9799396-Reviews",
'-or',n.character,"-Mussel_Burger_Bar_Downtown-Louisville_Kentucky.html")
reviews = read_html(url)
headline.temp = reviews %>%
html_nodes("span.noQuotes") %>%
html_text()
headline = append(headline,headline.temp)
# body including reviews and response from owner, need to look at responded.yn.temp to distinguish between review and response
body.temp <- reviews %>%
html_nodes(".entry .partial_entry") %>%
html_text()
# Owner responded yes or no
responded.yn.temp <- reviews %>%
html_nodes("div.mgrRspnInline") %>%
html_text()
responded.yn.temp <- strsplit(responded.yn.temp,"Responded ")
responded.yn.temp <- sapply(responded.yn.temp,function(x) x[2])
responded.yn.temp <- str_replace_all(responded.yn.temp,', 20..',"qwertyuiop")
responded.yn.temp <- strsplit(responded.yn.temp,'qwertyuiop')
responded.yn.temp <- sapply(responded.yn.temp,function(x) x[2])
responded.yn.temp <- body.temp %in% responded.yn.temp
df.temp <- func_body(body.temp,responded.yn.temp)
content.temp = df.temp$content
content = append(content,content.temp)
response.temp = df.temp$response
response = append(response,response.temp)
star.temp <- reviews %>%
html_nodes("span.ui_bubble_rating") %>%
html_attr("alt")
star.temp <- star.temp[!is.na(star.temp)]
star.temp <- star.temp[3:length(star.temp)]
star.temp <- strsplit(star.temp, " ")
star.temp <- as.numeric(lapply(star.temp, `[[`, 1))
star <- append(star,star.temp)
n = n + 10
print(o)
l_headline = length(headline.temp)
print(l_headline)
length_df.temp = data.frame(l_headline)
length_df1 = rbind(length_df1,length_df.temp)
n.character = as.character(n)
url = paste0("https://www.tripadvisor.com/Restaurant_Review-g39604-d9799396-Reviews",
'-or',n.character,"-Mussel_Burger_Bar_Downtown-Louisville_Kentucky.html")
reviews = read_html(url)
headline.temp = reviews %>%
html_nodes("span.noQuotes") %>%
html_text()
headline = append(headline,headline.temp)
# body including reviews and response from owner, need to look at responded.yn.temp to distinguish between review and response
body.temp <- reviews %>%
html_nodes(".entry .partial_entry") %>%
html_text()
# Owner responded yes or no
responded.yn.temp <- reviews %>%
html_nodes("div.mgrRspnInline") %>%
html_text()
responded.yn.temp <- strsplit(responded.yn.temp,"Responded ")
responded.yn.temp <- sapply(responded.yn.temp,function(x) x[2])
responded.yn.temp <- str_replace_all(responded.yn.temp,', 20..',"qwertyuiop")
responded.yn.temp <- strsplit(responded.yn.temp,'qwertyuiop')
responded.yn.temp <- sapply(responded.yn.temp,function(x) x[2])
responded.yn.temp <- body.temp %in% responded.yn.temp
df.temp <- func_body(body.temp,responded.yn.temp)
content.temp = df.temp$content
content = append(content,content.temp)
response.temp = df.temp$response
response = append(response,response.temp)
star.temp <- reviews %>%
html_nodes("span.ui_bubble_rating") %>%
html_attr("alt")
star.temp <- star.temp[!is.na(star.temp)]
star.temp <- star.temp[3:length(star.temp)]
star.temp <- strsplit(star.temp, " ")
star.temp <- as.numeric(lapply(star.temp, `[[`, 1))
star <- append(star,star.temp)
n = n + 10
print(o)
l_headline = length(headline.temp)
print(l_headline)
length_df.temp = data.frame(l_headline)
length_df1 = rbind(length_df1,length_df.temp)
n.character = as.character(n)
url = paste0("https://www.tripadvisor.com/Restaurant_Review-g39604-d9799396-Reviews",
'-or',n.character,"-Mussel_Burger_Bar_Downtown-Louisville_Kentucky.html")
reviews = read_html(url)
headline.temp = reviews %>%
html_nodes("span.noQuotes") %>%
html_text()
headline = append(headline,headline.temp)
# body including reviews and response from owner, need to look at responded.yn.temp to distinguish between review and response
body.temp <- reviews %>%
html_nodes(".entry .partial_entry") %>%
html_text()
# Owner responded yes or no
responded.yn.temp <- reviews %>%
html_nodes("div.mgrRspnInline") %>%
html_text()
responded.yn.temp <- strsplit(responded.yn.temp,"Responded ")
responded.yn.temp <- sapply(responded.yn.temp,function(x) x[2])
responded.yn.temp <- str_replace_all(responded.yn.temp,', 20..',"qwertyuiop")
responded.yn.temp <- strsplit(responded.yn.temp,'qwertyuiop')
responded.yn.temp <- sapply(responded.yn.temp,function(x) x[2])
responded.yn.temp <- body.temp %in% responded.yn.temp
df.temp <- func_body(body.temp,responded.yn.temp)
content.temp = df.temp$content
content = append(content,content.temp)
response.temp = df.temp$response
response = append(response,response.temp)
star.temp <- reviews %>%
html_nodes("span.ui_bubble_rating") %>%
html_attr("alt")
star.temp <- star.temp[!is.na(star.temp)]
star.temp <- star.temp[3:length(star.temp)]
star.temp <- strsplit(star.temp, " ")
star.temp <- as.numeric(lapply(star.temp, `[[`, 1))
star <- append(star,star.temp)
n = n + 10
print(o)
l_headline = length(headline.temp)
print(l_headline)
length_df.temp = data.frame(l_headline)
length_df1 = rbind(length_df1,length_df.temp)
n.character = as.character(n)
url = paste0("https://www.tripadvisor.com/Restaurant_Review-g39604-d9799396-Reviews",
'-or',n.character,"-Mussel_Burger_Bar_Downtown-Louisville_Kentucky.html")
reviews = read_html(url)
headline.temp = reviews %>%
html_nodes("span.noQuotes") %>%
html_text()
headline = append(headline,headline.temp)
# body including reviews and response from owner, need to look at responded.yn.temp to distinguish between review and response
body.temp <- reviews %>%
html_nodes(".entry .partial_entry") %>%
html_text()
# Owner responded yes or no
responded.yn.temp <- reviews %>%
html_nodes("div.mgrRspnInline") %>%
html_text()
responded.yn.temp <- strsplit(responded.yn.temp,"Responded ")
responded.yn.temp <- sapply(responded.yn.temp,function(x) x[2])
responded.yn.temp <- str_replace_all(responded.yn.temp,', 20..',"qwertyuiop")
responded.yn.temp <- strsplit(responded.yn.temp,'qwertyuiop')
responded.yn.temp <- sapply(responded.yn.temp,function(x) x[2])
responded.yn.temp <- body.temp %in% responded.yn.temp
df.temp <- func_body(body.temp,responded.yn.temp)
content.temp = df.temp$content
content = append(content,content.temp)
response.temp = df.temp$response
response = append(response,response.temp)
star.temp <- reviews %>%
html_nodes("span.ui_bubble_rating") %>%
html_attr("alt")
star.temp <- star.temp[!is.na(star.temp)]
star.temp <- star.temp[3:length(star.temp)]
star.temp <- strsplit(star.temp, " ")
star.temp <- as.numeric(lapply(star.temp, `[[`, 1))
star <- append(star,star.temp)
n = n + 10
print(o)
l_headline = length(headline.temp)
print(l_headline)
length_df.temp = data.frame(l_headline)
length_df1 = rbind(length_df1,length_df.temp)
n.character = as.character(n)
url = paste0("https://www.tripadvisor.com/Restaurant_Review-g39604-d9799396-Reviews",
'-or',n.character,"-Mussel_Burger_Bar_Downtown-Louisville_Kentucky.html")
reviews = read_html(url)
headline.temp = reviews %>%
html_nodes("span.noQuotes") %>%
html_text()
headline = append(headline,headline.temp)
# body including reviews and response from owner, need to look at responded.yn.temp to distinguish between review and response
body.temp <- reviews %>%
html_nodes(".entry .partial_entry") %>%
html_text()
# Owner responded yes or no
responded.yn.temp <- reviews %>%
html_nodes("div.mgrRspnInline") %>%
html_text()
responded.yn.temp <- strsplit(responded.yn.temp,"Responded ")
responded.yn.temp <- sapply(responded.yn.temp,function(x) x[2])
responded.yn.temp <- str_replace_all(responded.yn.temp,', 20..',"qwertyuiop")
responded.yn.temp <- strsplit(responded.yn.temp,'qwertyuiop')
responded.yn.temp <- sapply(responded.yn.temp,function(x) x[2])
responded.yn.temp <- body.temp %in% responded.yn.temp
df.temp <- func_body(body.temp,responded.yn.temp)
content.temp = df.temp$content
content = append(content,content.temp)
response.temp = df.temp$response
response = append(response,response.temp)
star.temp <- reviews %>%
html_nodes("span.ui_bubble_rating") %>%
html_attr("alt")
star.temp <- star.temp[!is.na(star.temp)]
star.temp <- star.temp[3:length(star.temp)]
star.temp <- strsplit(star.temp, " ")
star.temp <- as.numeric(lapply(star.temp, `[[`, 1))
star <- append(star,star.temp)
n = n + 10
print(o)
l_headline = length(headline.temp)
print(l_headline)
length_df.temp = data.frame(l_headline)
length_df1 = rbind(length_df1,length_df.temp)
n.character = as.character(n)
url = paste0("https://www.tripadvisor.com/Restaurant_Review-g39604-d9799396-Reviews",
'-or',n.character,"-Mussel_Burger_Bar_Downtown-Louisville_Kentucky.html")
reviews = read_html(url)
headline.temp = reviews %>%
html_nodes("span.noQuotes") %>%
html_text()
headline = append(headline,headline.temp)
# body including reviews and response from owner, need to look at responded.yn.temp to distinguish between review and response
body.temp <- reviews %>%
html_nodes(".entry .partial_entry") %>%
html_text()
# Owner responded yes or no
responded.yn.temp <- reviews %>%
html_nodes("div.mgrRspnInline") %>%
html_text()
responded.yn.temp <- strsplit(responded.yn.temp,"Responded ")
responded.yn.temp <- sapply(responded.yn.temp,function(x) x[2])
responded.yn.temp <- str_replace_all(responded.yn.temp,', 20..',"qwertyuiop")
responded.yn.temp <- strsplit(responded.yn.temp,'qwertyuiop')
responded.yn.temp <- sapply(responded.yn.temp,function(x) x[2])
responded.yn.temp <- body.temp %in% responded.yn.temp
df.temp <- func_body(body.temp,responded.yn.temp)
content.temp = df.temp$content
content = append(content,content.temp)
response.temp = df.temp$response
response = append(response,response.temp)
star.temp <- reviews %>%
html_nodes("span.ui_bubble_rating") %>%
html_attr("alt")
star.temp <- star.temp[!is.na(star.temp)]
star.temp <- star.temp[3:length(star.temp)]
star.temp <- strsplit(star.temp, " ")
star.temp <- as.numeric(lapply(star.temp, `[[`, 1))
star <- append(star,star.temp)
n = n + 10
print(o)
l_headline = length(headline.temp)
print(l_headline)
length_df.temp = data.frame(l_headline)
length_df1 = rbind(length_df1,length_df.temp)
n.character = as.character(n)
url = paste0("https://www.tripadvisor.com/Restaurant_Review-g39604-d9799396-Reviews",
'-or',n.character,"-Mussel_Burger_Bar_Downtown-Louisville_Kentucky.html")
reviews = read_html(url)
headline.temp = reviews %>%
html_nodes("span.noQuotes") %>%
html_text()
headline = append(headline,headline.temp)
# body including reviews and response from owner, need to look at responded.yn.temp to distinguish between review and response
body.temp <- reviews %>%
html_nodes(".entry .partial_entry") %>%
html_text()
# Owner responded yes or no
responded.yn.temp <- reviews %>%
html_nodes("div.mgrRspnInline") %>%
html_text()
responded.yn.temp <- strsplit(responded.yn.temp,"Responded ")
responded.yn.temp <- sapply(responded.yn.temp,function(x) x[2])
responded.yn.temp <- str_replace_all(responded.yn.temp,', 20..',"qwertyuiop")
responded.yn.temp <- strsplit(responded.yn.temp,'qwertyuiop')
responded.yn.temp <- sapply(responded.yn.temp,function(x) x[2])
responded.yn.temp <- body.temp %in% responded.yn.temp
df.temp <- func_body(body.temp,responded.yn.temp)
content.temp = df.temp$content
content = append(content,content.temp)
response.temp = df.temp$response
response = append(response,response.temp)
star.temp <- reviews %>%
html_nodes("span.ui_bubble_rating") %>%
html_attr("alt")
star.temp <- star.temp[!is.na(star.temp)]
star.temp <- star.temp[3:length(star.temp)]
star.temp <- strsplit(star.temp, " ")
star.temp <- as.numeric(lapply(star.temp, `[[`, 1))
star <- append(star,star.temp)
n = n + 10
print(o)
l_headline = length(headline.temp)
print(l_headline)
length_df.temp = data.frame(l_headline)
length_df1 = rbind(length_df1,length_df.temp)
n.character = as.character(n)
url = paste0("https://www.tripadvisor.com/Restaurant_Review-g39604-d9799396-Reviews",
'-or',n.character,"-Mussel_Burger_Bar_Downtown-Louisville_Kentucky.html")
reviews = read_html(url)
headline.temp = reviews %>%
html_nodes("span.noQuotes") %>%
html_text()
headline = append(headline,headline.temp)
# body including reviews and response from owner, need to look at responded.yn.temp to distinguish between review and response
body.temp <- reviews %>%
html_nodes(".entry .partial_entry") %>%
html_text()
# Owner responded yes or no
responded.yn.temp <- reviews %>%
html_nodes("div.mgrRspnInline") %>%
html_text()
responded.yn.temp <- strsplit(responded.yn.temp,"Responded ")
responded.yn.temp <- sapply(responded.yn.temp,function(x) x[2])
responded.yn.temp <- str_replace_all(responded.yn.temp,', 20..',"qwertyuiop")
responded.yn.temp <- strsplit(responded.yn.temp,'qwertyuiop')
responded.yn.temp <- sapply(responded.yn.temp,function(x) x[2])
responded.yn.temp <- body.temp %in% responded.yn.temp
df.temp <- func_body(body.temp,responded.yn.temp)
content.temp = df.temp$content
content = append(content,content.temp)
response.temp = df.temp$response
response = append(response,response.temp)
star.temp <- reviews %>%
html_nodes("span.ui_bubble_rating") %>%
html_attr("alt")
star.temp <- star.temp[!is.na(star.temp)]
star.temp <- star.temp[3:length(star.temp)]
star.temp <- strsplit(star.temp, " ")
star.temp <- as.numeric(lapply(star.temp, `[[`, 1))
star <- append(star,star.temp)
n = n + 10
print(o)
l_headline = length(headline.temp)
print(l_headline)
length_df.temp = data.frame(l_headline)
length_df1 = rbind(length_df1,length_df.temp)
n.character = as.character(n)
url = paste0("https://www.tripadvisor.com/Restaurant_Review-g39604-d9799396-Reviews",
'-or',n.character,"-Mussel_Burger_Bar_Downtown-Louisville_Kentucky.html")
reviews = read_html(url)
headline.temp = reviews %>%
html_nodes("span.noQuotes") %>%
html_text()
headline = append(headline,headline.temp)
# body including reviews and response from owner, need to look at responded.yn.temp to distinguish between review and response
body.temp <- reviews %>%
html_nodes(".entry .partial_entry") %>%
html_text()
# Owner responded yes or no
responded.yn.temp <- reviews %>%
html_nodes("div.mgrRspnInline") %>%
html_text()
responded.yn.temp <- strsplit(responded.yn.temp,"Responded ")
responded.yn.temp <- sapply(responded.yn.temp,function(x) x[2])
responded.yn.temp <- str_replace_all(responded.yn.temp,', 20..',"qwertyuiop")
responded.yn.temp <- strsplit(responded.yn.temp,'qwertyuiop')
responded.yn.temp <- sapply(responded.yn.temp,function(x) x[2])
responded.yn.temp <- body.temp %in% responded.yn.temp
df.temp <- func_body(body.temp,responded.yn.temp)
content.temp = df.temp$content
content = append(content,content.temp)
response.temp = df.temp$response
response = append(response,response.temp)
star.temp <- reviews %>%
html_nodes("span.ui_bubble_rating") %>%
html_attr("alt")
star.temp <- star.temp[!is.na(star.temp)]
star.temp <- star.temp[3:length(star.temp)]
star.temp <- strsplit(star.temp, " ")
star.temp <- as.numeric(lapply(star.temp, `[[`, 1))
star <- append(star,star.temp)
n = n + 10
print(o)
l_headline = length(headline.temp)
print(l_headline)
length_df.temp = data.frame(l_headline)
length_df1 = rbind(length_df1,length_df.temp)
n.character = as.character(n)
url = paste0("https://www.tripadvisor.com/Restaurant_Review-g39604-d9799396-Reviews",
'-or',n.character,"-Mussel_Burger_Bar_Downtown-Louisville_Kentucky.html")
reviews = read_html(url)
headline.temp = reviews %>%
html_nodes("span.noQuotes") %>%
html_text()
headline = append(headline,headline.temp)
# body including reviews and response from owner, need to look at responded.yn.temp to distinguish between review and response
body.temp <- reviews %>%
html_nodes(".entry .partial_entry") %>%
html_text()
# Owner responded yes or no
responded.yn.temp <- reviews %>%
html_nodes("div.mgrRspnInline") %>%
html_text()
responded.yn.temp <- strsplit(responded.yn.temp,"Responded ")
responded.yn.temp <- sapply(responded.yn.temp,function(x) x[2])
responded.yn.temp <- str_replace_all(responded.yn.temp,', 20..',"qwertyuiop")
responded.yn.temp <- strsplit(responded.yn.temp,'qwertyuiop')
responded.yn.temp <- sapply(responded.yn.temp,function(x) x[2])
responded.yn.temp <- body.temp %in% responded.yn.temp
df.temp <- func_body(body.temp,responded.yn.temp)
content.temp = df.temp$content
content = append(content,content.temp)
response.temp = df.temp$response
response = append(response,response.temp)
star.temp <- reviews %>%
html_nodes("span.ui_bubble_rating") %>%
html_attr("alt")
star.temp <- star.temp[!is.na(star.temp)]
star.temp <- star.temp[3:length(star.temp)]
star.temp <- strsplit(star.temp, " ")
star.temp <- as.numeric(lapply(star.temp, `[[`, 1))
star <- append(star,star.temp)
n = n + 10
print(o)
l_headline = length(headline.temp)
print(l_headline)
length_df.temp = data.frame(l_headline)
length_df1 = rbind(length_df1,length_df.temp)
View(length_df2)
View(length_df1)
